pg-input,
pg-input-inner {
  display: contents;
}

pg-input-inner {
  input {
    border: none;
    width: 100%;
    height: 28px;
    background-color: transparent;
    outline: none;
    padding: 2px 8px;
    color: var(--pg-fg);
    transition: padding 0.2s ease;
  }

  input[type='password'] {
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI',
      Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue',
      sans-serif;
  }

  input[type='password']::placeholder {
    font-family: 'Atkinson Hyperlegible', sans-serif; /* because font of dots is different */
    letter-spacing: normal;
  }

  input::placeholder {
    font-family: inherit;
    color: var(--pg-neutral-mid);
  }
  input:disabled::placeholder {
    color: var(--pg-bg-mid);
  }
  input:invalid::placeholder {
    color: var(--pg-error-fg-accent);
  }
  input:focus::placeholder {
    color: var(--pg-neutral-mid);
  }

  input:placeholder-shown {
    padding-top: 16px;
    text-overflow: ellipsis;
  }
  input:focus:placeholder-shown,
  input:disabled:placeholder-shown {
    padding-top: 2px;
  }

  label:has(input) {
    display: flex;
    flex-direction: row-reverse;
    flex-wrap: wrap-reverse;
    justify-content: left;
    align-items: start;
    border-radius: 8px;
    align-content: center;
    height: 64px;
    position: relative;
    width: 100%;
  }

  label:has(input) > span {
    background-color: transparent;
    color: var(--pg-fg-accent);
    width: 100%;
    border-radius: 0 0 8px 8px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: left;
    height: 28px;
    padding: 0 2px;
    font-size: 14px;
    opacity: 1;
    transform: translateY(0%);
    transition: transform 0.2s ease, opacity 0.2s 0.05s ease, color 0.2s linear !important;
  }

  label:has(input:placeholder-shown) > span {
    opacity: 0;
    transform: translateY(-100%);
    color: var(--pg-bg);
    border-color: transparent;
    transition: transform 0.2s 0.2s ease, opacity 0.2s 0.2s ease;
  }
  @media (hover: hover) {
    label:has(input:placeholder-shown):hover::before {
      height: 25%;
      top: 66%;
    }
    label.focus:has(input:placeholder-shown):hover::before,
    label:has(input:focus:placeholder-shown):hover::before {
      height: 50%;
      top: 50%;
    }

    label:has(input:placeholder-shown:disabled):hover::before {
      height: 100%;
      top: 0%;
    }
  }

  input:placeholder-shown {
    transform: translateY(0%);
    transition: transform 0.2s ease, padding 0.2s ease;
  }

  // prefers-reduced-motion
  @media (prefers-reduced-motion: reduce) {
    input:placeholder-shown {
      transition: none;
    }
  }

  label:has(input)::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    width: 100%;
    height: 50%;
    border-radius: 8px;
    background-color: transparent;
    transition: height 0.2s ease, top 0.2s ease, background-color 0.2s ease,
      border 0.2s ease;
    border: 1px solid var(--pg-fg-accent);
  }
  label:has(input:placeholder-shown)::before {
    height: 2px;
    top: 75%;
    border-color: transparent;
    background-color: var(--pg-fg-accent);
  }

  label:has(input:focus)::before,
  label.focus::before {
    background-color: var(--pg-fg-accent);
    height: 50%;
    top: 50%;
  }

  label:has(input:disabled)::before {
    background-color: var(--pg-bg);
    border-color: var(--pg-bg);
    height: 100%;
    top: 0;
  }

  label:has(input:focus) > span,
  label.focus > span {
    color: var(--pg-bg);
    opacity: 1;
    transform: translateY(0%);
    position: relative;
    z-index: 1;
  }

  label:has(input) > span::before,
  label > span::before {
    // up arrow
    content: '↑';
    margin-right: 0.25rem;
  }

  input {
    -webkit-animation: active 0s linear;
    -o-animation: active 0s linear;
    -ms-animation: active 0s linear;
    animation: valid 0s linear;
  }

  // if input has error
  input:invalid {
    -webkit-animation: active 0s linear;
    -o-animation: active 0s linear;
    -ms-animation: active 0s linear;
    animation: invalid 0s linear;
  }

  @keyframes invalid {
    // intentionally empty
  }

  @keyframes valid {
    // intentionally empty
  }

  input:disabled {
    color: var(--pg-fg-mid);
    z-index: 1;
  }

  input:disabled:placeholder-shown {
    border-color: transparent;
    border-radius: 8px;
    transform: translateY(50%);
  }

  label:has(input:disabled:placeholder-shown) {
    > span {
      background-color: transparent;
      border-color: transparent;
    }
  }

  label:has(input:disabled) > span {
    color: var(--pg-bg-mid);
    border-color: transparent;
  }

  label:has(input:invalid) > span,
  &.error > span {
    font-size: 12px;
    padding: 2px;
    line-height: 1;
    color: var(--pg-error-fg-accent);
    &::before {
      color: var(--pg-error-fg-accent);
    }
  }

  label:has(input:invalid:focus) > span,
  &.error > label.focus > span {
    color: var(--pg-error-bg);
    &::before {
      color: var(--pg-error-bg-accent);
    }
  }

  label:has(input:invalid) > span::before,
  &.error span::before {
    content: '↳';
    color: var(--pg-error-fg-accent);
  }
}
